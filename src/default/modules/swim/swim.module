<?php
use Drupal\Core\Datetime\DrupalDateTime;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Url; 

/**
 * Implements hook_theme().
 * https://www.drupal.org/docs/theming-drupal/twig-in-drupal/create-custom-twig-templates-for-custom-module
 */
function swim_theme($existing, $type, $theme, $path) {
  return [
    'swims' => [
      'variables' => ['test_var' => NULL],
    ],
    'show' => [
      'variables' => ['id' => NULL,       
                      'title' => NULL,
                      'description' => NULL,
                      'locked' => NULL,
                      'date_time' => NULL,
                      'uid' => NULL,
                      'swimmers' => NULL,
                      'kayakers' => NULL,
                      'signed_up' => NULL,
                      'host_name' => NULL,
                      'host_email' => NULL,
                      'host_picture' => NULL,
                      'isAdmin' => NULL,
                      'isApproved' => NULL,
                      'isKayaker' => NULL,
                      'isSwimmer' => NULL]
    ],
    'edit' => [
      'variables' => ['id' => NULL],
    ],
    'attendance_list' => [
      'variables' => ['id' => NULL],
    ],
    'admins_info' => [
        'variables' => [],
    ],

  ];
}


function swim_cron() {
  $past_date = DrupalDateTime::createFromTimestamp(time())->modify('-3 day')->format(\Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface::DATETIME_STORAGE_FORMAT);
  $future_date = DrupalDateTime::createFromTimestamp(time())->modify('+1 day')->format(\Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface::DATETIME_STORAGE_FORMAT);

  $query = \Drupal::database()->select('icows_swims', 'i');
  $query->condition('i.date_time', $past_date, '>=');
  $query->condition('i.date_time', $future_date, '<=');
  $query->condition('i.locked', [0,1], 'IN');
  $query->fields('i', ['uid', 'swim_id', 'date_time', 'title', 'description', 'locked']);
  $swims = $query->execute()->fetchAll();

  foreach ($swims as &$swim) {
    $database = \Drupal::database();
        $database->update('icows_swims')->fields(array(
          'locked' => 2,
        ))->condition('swim_id', $swim->swim_id, '=')->execute();
  }
  send_logged_emails();
}

function verify_swim_status($id) {
  $query = \Drupal::database()->select('icows_swims', 'i');
  
  $query->condition('i.swim_id', $id, '=');

  $query->fields('i', ['uid', 'swim_id', 'date_time', 'title', 'description', 'locked']);
  $swim = $query->execute()->fetchAll()[0];
  if ($swim->locked == 1 || $swim->locked == 2) {
      $response = new RedirectResponse(Url::fromRoute('swim.show', ['id' => $id])->toString());
      $response->send();
      return;
  }
  else if (!$swim) {
      $response = new RedirectResponse("/");
      $response->send();
      return;
  }
}

function log_swim_change($swim_id, $recipient_uid, $message) {
  $one_day_from_now = DrupalDateTime::createFromTimestamp(time())->modify('+1 day')->format(\Drupal\datetime\Plugin\Field\FieldType\DateTimeItemInterface::DATETIME_STORAGE_FORMAT);

  $query = \Drupal::database()->select('icows_swims', 'i');
  $query->condition('i.swim_id', $swim_id, '=');
  $query->fields('i', ['date_time']);
  $swims = $query->execute()->fetchAll();

  if (count($swims) == 0) {
    \Drupal::messenger()->addError(sprintf('No swim exists with id %d', $swim_id));
    return;
  } else if ($swims[0]->date_time <= $one_day_from_now){
    $recipient = \Drupal\user\Entity\User::load($recipient_uid)->getEmail();
    send_email($recipient, $message, "important_swim_changes");
  } else {
    log_email($recipient_uid, $message);
  }
}


function log_email($recipient_uid, $message) {
  if (\Drupal\user\Entity\User::load($recipient_uid) == NULL) {
    \Drupal::messenger()->addError(t('Email logger failed: the user tied with this message does not exist.'));
    return;
  }

  $values = [
    [
      'recipient_uid' => $recipient_uid,
      'message' => $message,
    ],
  ];

  $database = \Drupal::database();
  $query = $database->insert('icows_email_logs')->fields(['recipient_uid', 'message']);
  foreach ($values as $value) {
      $query->values($value);
  }
  $query->execute();
  return;
}

function send_logged_emails() {
  $query = \Drupal::database()->select('icows_email_logs', 'i');
  $query->fields('i', ['email_log_id', 'recipient_uid', 'message']);
  $emails = $query->execute()->fetchAll();

  $notifications = array();

  if (count($emails) == 0) {
    \Drupal::messenger()->addMessage(t('No emails to send.'));
    return;
  }

  foreach ($emails as &$email) {
    $recipient = \Drupal\user\Entity\User::load($email->recipient_uid)->getEmail();
    if (array_key_exists($recipient, $notifications)) {
      array_push($notifications[$recipient], $email->message);
    }
    else {
      $notifications[$recipient] = array($email->message);
    }
  }

  $recipients = array_keys($notifications);
  foreach ($recipients as &$recipient) {
    $message = "Hi, here is an update for the icows website:\n\t" . implode("\n\t", $notifications[$recipient]);
    send_email($recipient, $message);
  }

  \Drupal::database()->delete('icows_email_logs')->execute();
  return;
}

function send_email($recipient, $message, $message_key="alert_swim_host") {
  $mailManager = \Drupal::service('plugin.manager.mail');
  $module = 'swim';
  $params['message'] = $message;
  $langcode = \Drupal::currentUser()->getPreferredLangcode();
  $send = true;
 
  // TODO: Actually send the email
  $result = $mailManager->mail($module, $message_key, $recipient, $langcode, $params, NULL, $send);
  // \Drupal::messenger()->addMessage($params['message']);

  if ($result['result'] !== true) {
    \Drupal::messenger()->addError(t('There was a problem sending your email message and it was not sent.'));
  }
}

/**
* Implements hook_mail().
* https://www.valuebound.com/resources/blog/how-to-send-mail-programmatically-drupal-8
*/
function swim_mail($key, &$message, $params) {
  $options = array(
    'langcode' => $message['langcode'],
  );

  var_dump("WE made it to this point!");
 
  switch ($key) {
    case 'alert_swim_host':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('An hourly upate of changes to icows:');
      $message['body'][] = $params['message'];
      break;
    case 'important_swim_changes':
      $message['from'] = \Drupal::config('system.site')->get('mail');
      $message['subject'] = t('Changes were made to an upcoming swim.');
      $message['body'][] = "The following change occured for a swim that is scheduled for less than 24hrs from now:\n\t" . $params['message'];
      break;
  }
}


function getProfilePicture($user_id) {
  if (\Drupal\user\Entity\User::load($user_id)->user_picture->entity == NULL) {
    $field = \Drupal\field\Entity\FieldConfig::loadByName('user', 'user', 'user_picture');
    $default_image = $field->getSetting('default_image');
    $file = \Drupal::service('entity.repository')->loadEntityByUuid('file', $default_image['uuid']);
    return $file->getFileUri();
  }
  else {
    return \Drupal\user\Entity\User::load($user_id)->user_picture->entity->getFileUri();
  }
}

