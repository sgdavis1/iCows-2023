{# swim/templates/show.html.twig #}
<div class="centerDateTime">{{ date_time }}</div>

<div class="swim-signup-row">
  <div class="swim-signup-column left">
    {% if locked == 1 %}
      <div style="text-align: center;">
        <h1>This swim is locked</h1>
      </div>
    {% endif %}

    <h2>Description</h2>
    <p> {{ description }} </p>
  </div>

  <div class="swim-signup-column right">
    <h2> Host: </h2>
    <p> {{ drupal_image(host_picture, 'medium') }} </p>
    <p> Name: {{ host_name }} </p>
    <p> Email: {{ host_email }} </p>
    <div>
      <div style="float: left; padding-right: 10px">
        {% if isAdmin %}
          <form action={{drupal_url("swims/#{id}/exports/attendee_list")}}>
            <input type="submit" value="Export Attendees" />
          </form>
        {% endif %}
      </div>

      <div style="float: left">
        {% if isAdmin %}
          <form action={{drupal_url("/swims/#{id}/delete")}}>
            <input type="submit" onclick="clicked(event)" value="Delete" />
          </form>
        {% endif %}
      </div>

      <div style="float: left">
        {% if isAdmin %}
          <form action={{drupal_url("/swims/#{id}/send_list")}}>
            <input type="submit" value="Send List"
                   onclick="return confirm('Are you sure you want to export this list of swimmer/kayakers?')"/>
          </form>
        {% endif %}
      </div>
    </div>
  </div>
</div>


<div>
  <h2>Swimmers</h2>
  {% if (not signed_up) and locked == 0 and isApproved%}
    <form action={{drupal_url("swims/#{id}/signup")}}>
      <input type="submit" value="Swimmer Signup" />
    </form>
  {% endif %}
  {% if swimmers %}
    <table class="table table-striped swimmers">
      <thead>
      <tr>
        <th scope="col"></th>
        <th scope="col" onclick="sortSwimmers('name')" id="name" class="pointer-cursor">Name</th>
        <th scope="col">User</th>
        <th scope="col">Email</th>
        <th scope="col">RSVP</th>
        <th scope="col" onclick="sortSwimmers('pace')" id="pace" class="pointer-cursor">Pace</th>
        <th scope="col" onclick="sortSwimmers('distance')" id="distance" class="pointer-cursor">Distance</th>
        <th scope="col" onclick="sortSwimmers('boats')" id="boats" class="pointer-cursor">Boats</th>
        <th scope="col">Can Kayak</th>

      </tr>
      </thead>
      <tbody id="swimmers">
      {% for swimmer in swimmers %}
        <tr>
          <th scope="row">{{ drupal_image(swimmer.picture, 'medium') }}</th>
          <td>{{ swimmer.name }}</td>
          <td>{{ swimmer.username }}</td>
          <td>{{ swimmer.email }}</td>
          <td>{{ swimmer.rsvp }}</td>
          <td>{{ swimmer.estimated_pace }}</td>
          <td>{{ swimmer.distance }}km</td>
          <td>{{ swimmer.number_of_kayaks }}</td>
          <td>{{ swimmer.kayaker }}</td>
        </tr>
      {% endfor %}
      </tbody>
    </table>
  {% else %}
    No swimmers have signed up yet.
  {% endif %}

  {% if signed_up and isSwimmer %}
    <form action={{drupal_url("swims/#{id}/drop_out")}}>
      <input type="submit" value="Drop out!" onclick="return confirm('Do you want to drop out of this swim?')" />
    </form>
  {% endif %}

  <h2>Kayakers</h2>
  {% if (not signed_up) and isApproved%}
    <form action={{drupal_url("swims/#{id}/KayakSignup")}}>
      <input type="submit" value="Kayaker Signup" />
    </form>
  {% endif %}

  {% if kayakers %}
    <table class="table table-striped kayakers">
      <thead>
      <tr>
        <th scope="col"></th>
        <th scope="col" onclick="sortKayakers('name')" id="name_kayak" class="pointer-cursor">Name</th>
        <th scope="col">User</th>
        <th scope="col">Email</th>
        <th scope="col">RSVP</th>
        <th scope="col" onclick="sortKayakers('boats')" id="boats_kayak" class="pointer-cursor">Boats</th>
      </tr>
      </thead>
      <tbody id="kayakers">
      {% for kayaker in kayakers %}
        <tr>
          <th scope="row">{{ drupal_image(kayaker.picture, 'thumbnail') }}</th>
          <td>{{ kayaker.name }}</td>
          <td>{{ kayaker.username }}</td>
          <td>{{ kayaker.email }}</td>
          <td>{{ kayaker.rsvp }}</td>
          <td>{{ kayaker.number_of_kayaks }}</td>
        </tr>
      {% endfor %}
      </tbody>
    </table>
  {% else %}
    No kayakers have signed up yet.
  {% endif %}

  {% if signed_up and isKayaker%}
    <form action={{drupal_url("swims/#{id}/drop_out")}}>
      <input type="submit" value="Drop out!" onclick="return confirm('Do you want to drop out of this swim?')" />
    </form>
  {% endif %}
</div>

<script>

  var SortEnum = {
    DECREASING: 1,
    INCREASING: 2,
    NO_SORT: 3,
  };

  var swimRowSorting = {'name': SortEnum.NO_SORT, 'boats': SortEnum.NO_SORT,
                        'pace': SortEnum.NO_SORT, 'distance': SortEnum.NO_SORT };
  var kayakRowSorting = {'name': SortEnum.NO_SORT, 'boats': SortEnum.NO_SORT};

  function clicked(e)
  {
    if(!confirm('Are you sure you want to delete the swim?')) {
      e.preventDefault();
    }
  }
  function sortSwimmers(field) {
    //change all other fields to no sort
    for(var sortField in swimRowSorting){
      if(sortField !== field){
        swimRowSorting[sortField] = SortEnum.NO_SORT;
        document.getElementById(sortField).className = "pointer-cursor";
      }
    }

    if(swimRowSorting[field] === SortEnum.DECREASING){
      swimRowSorting[field] = SortEnum.INCREASING;
      document.getElementById(field).className = "up-arrow";
    }
    else if(swimRowSorting[field] === SortEnum.INCREASING){
      swimRowSorting[field] = SortEnum.DECREASING;
      document.getElementById(field).className = "down-arrow";
    }
    else{
      swimRowSorting[field] = SortEnum.INCREASING;
      document.getElementById(field).className = "up-arrow";
    }

    const table = document.querySelector('.swimmers'); //get the table to be sorted
    const tableBody = table.querySelector('tbody');
    const tableData = table2data(tableBody, ['name', 'user', 'email', 'RSVP', 'pace', 'distance', 'boats']);
    tableData.sort((a, b)=>{

      if((swimRowSorting[field] === SortEnum.INCREASING && a[field] >= b[field]) ||
         (swimRowSorting[field] === SortEnum.DECREASING && a[field] <= b[field])){
        return 1;
      }
      return -1;
    })
    data2table(tableBody, tableData, ['name', 'user', 'email', 'RSVP', 'pace', 'distance', 'boats']);
  }

  function sortKayakers(field) {
    for(var sortField in kayakRowSorting){
      if(sortField !== field){
        kayakRowSorting[sortField] = SortEnum.NO_SORT;
        document.getElementById(sortField + "_kayak").className = "pointer-cursor";
      }
    }
    if(kayakRowSorting[field] === SortEnum.DECREASING){
      kayakRowSorting[field] = SortEnum.INCREASING;
      document.getElementById(field + "_kayak").className = "up-arrow";
    }
    else if(kayakRowSorting[field] === SortEnum.INCREASING){
      kayakRowSorting[field] = SortEnum.DECREASING;
      document.getElementById(field + "_kayak").className = "down-arrow";
    }
    else{
      kayakRowSorting[field] = SortEnum.INCREASING;
      document.getElementById(field + "_kayak").className = "up-arrow";
    }
    const table = document.querySelector('.kayakers'); //get the table to be sorted
    const tableBody = table.querySelector('tbody');
    const tableData = table2data(tableBody, ['name', 'user', 'email', 'RSVP', 'boats']);
    tableData.sort((a, b)=>{

      if((kayakRowSorting[field] === SortEnum.INCREASING && a[field] >= b[field]) ||
              (kayakRowSorting[field] === SortEnum.DECREASING && a[field] <= b[field])){
        return 1;
      }
      return -1;
    })
    data2table(tableBody, tableData, ['name', 'user', 'email', 'RSVP', 'boats']);
  }

  function table2data(tableBody, headers){
    const tableData = []; // create the array that'll hold the data rows
    tableBody.querySelectorAll('tr')
            .forEach(row=>{  // for each table row...
              var rowData = {};  // make an array for that row
              let i = 0;
              row.querySelectorAll('td')  // for each cell in that row
                      .forEach(cell=>{
                        rowData[headers[i]] = cell.innerText;  // add it to the row data
                        i++;
                      })
              tableData.push(rowData);  // add the full row to the table data
            });
    return tableData;
  }

  function data2table(tableBody, tableData, headers){
    tableBody.querySelectorAll('tr') // for each table row...
            .forEach((row, i)=>{
              const rowData = tableData[i]; // get the array for the row data
              row.querySelectorAll('td')  // for each table cell ...
                      .forEach((cell, j)=>{
                        cell.innerText = rowData[headers[j]]; // put the appropriate array element into the cell
                      })
            });
  }
</script>
